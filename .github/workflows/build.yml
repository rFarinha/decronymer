name: Build and Release Decronymer

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'  # Push events to tags matching v*, e.g., v1.0, v20.15.10
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node-version: [18.x]
      # Don't fail the entire workflow if one OS build fails
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm install
    
    # Add specific dependencies for Linux builds
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev libnss3 libgtk-3-dev libasound2-dev
    
    # Add debug step to see folder structure before build
    - name: Debug project structure
      run: |
        echo "Current directory content:"
        ls -la
    
    - name: Build application
      run: npm run make
    
    # Add debug step to see output folder structure after build
    - name: Debug output structure
      run: |
        echo "Output directory content:"
        ls -la out || echo "No out directory found"
        if [ -d "out/make" ]; then
          echo "Make directory content:"
          find out/make -type f | sort
        else
          echo "No out/make directory found"
        fi
      shell: bash
    
    # Instead of using the upload-artifact action directly, we'll create a tarball
    # and upload it using GitHub's native artifact support
    - name: Create artifact archive
      run: |
        if [ -d "out/make" ]; then
          mkdir -p artifacts
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a -tzip artifacts/decronymer-${{ matrix.os }}.zip ./out/make/*
          else
            tar -czvf artifacts/decronymer-${{ matrix.os }}.tar.gz -C out/make .
          fi
        else
          echo "No artifacts to upload"
          exit 1
        fi
      shell: bash
      
    # Use a more basic method to upload artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: decronymer-${{ matrix.os }}
        path: artifacts/
        if-no-files-found: warn
    
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v2
      with:
        name: decronymer-windows-latest
        path: release-artifacts/windows
    
    - name: Download macOS artifacts
      uses: actions/download-artifact@v2
      with:
        name: decronymer-macos-latest
        path: release-artifacts/macos
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v2
      with:
        name: decronymer-ubuntu-latest
        path: release-artifacts/linux
    
    - name: Extract artifacts
      run: |
        mkdir -p extracted
        
        # Extract Windows artifacts
        if [ -f "release-artifacts/windows/decronymer-windows-latest.zip" ]; then
          unzip -o release-artifacts/windows/decronymer-windows-latest.zip -d extracted/windows
        fi
        
        # Extract macOS artifacts
        if [ -f "release-artifacts/macos/decronymer-macos-latest.tar.gz" ]; then
          mkdir -p extracted/macos
          tar -xzvf release-artifacts/macos/decronymer-macos-latest.tar.gz -C extracted/macos
        fi
        
        # Extract Linux artifacts
        if [ -f "release-artifacts/linux/decronymer-ubuntu-latest.tar.gz" ]; then
          mkdir -p extracted/linux
          tar -xzvf release-artifacts/linux/decronymer-ubuntu-latest.tar.gz -C extracted/linux
        fi
        
        # List all extracted files
        echo "Extracted files:"
        find extracted -type f | sort
      shell: bash
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          extracted/**/*.exe
          extracted/**/*.dmg
          extracted/**/*.deb
          extracted/**/*.rpm
          extracted/**/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
