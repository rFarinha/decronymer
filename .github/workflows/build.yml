name: Build and Release Decronymer

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'  # Push events to tags matching v*, e.g., v1.0, v20.15.10
  pull_request:
    branches: [ main, master ]

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate SemVer compatibility
      run: |
        # Extract version from package.json
        VERSION=$(node -p "require('./package.json').version")
        echo "Package version: $VERSION"
        
        # Check if version follows SemVer (MAJOR.MINOR.PATCH)
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Version '$VERSION' is not SemVer-compatible. It should follow the format MAJOR.MINOR.PATCH (e.g. 0.2.0)"
          exit 1
        fi
        
        # Also check setup-script.iss if it exists
        if [ -f "setup-script.iss" ]; then
          ISS_VERSION=$(grep 'MyAppVersion' setup-script.iss | head -1 | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          echo "Inno Setup version: $ISS_VERSION"
          
          if [[ ! $ISS_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Inno Setup version '$ISS_VERSION' is not SemVer-compatible. It should follow the format MAJOR.MINOR.PATCH (e.g. 0.2.0)"
            exit 1
          fi
          
          # Check if versions match
          if [ "$VERSION" != "$ISS_VERSION" ]; then
            echo "::warning::Version mismatch between package.json ($VERSION) and setup-script.iss ($ISS_VERSION)"
          fi
        fi
  
  build:
    needs: validate-version
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node-version: [18.x]
      # Don't fail the entire workflow if one OS build fails
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    # Install dependencies with specific troubleshooting for Electron Forge
    - name: Install dependencies
      run: |
        npm install
        npm install --save-dev electron-prebuilt-compile
        npm list electron
        npm list @electron-forge/cli
      shell: bash
    
    # Add specific dependencies for Linux builds
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev libnss3 libgtk-3-dev libasound2-dev
    
    # Debug the project structure and node_modules
    - name: Debug project structure
      run: |
        echo "Current directory content:"
        ls -la
        
        echo "Node modules:"
        if [ -d "node_modules" ]; then
          ls -la node_modules | grep electron
          ls -la node_modules/@electron-forge || echo "No @electron-forge directory"
        else
          echo "No node_modules directory found"
        fi
      shell: bash
    
    # Build application with error checking
    - name: Build application
      run: |
        echo "Starting Electron Forge build..."
        npm run make || (echo "Build failed, showing debug info:" && npx electron-forge --verbose make)
      shell: bash
    
    # Add debug step to see output folder structure after build
    - name: Debug output structure
      run: |
        echo "Output directory content:"
        ls -la out || echo "No out directory found"
        if [ -d "out/make" ]; then
          echo "Make directory content:"
          find out/make -type f | sort
        else
          echo "No out/make directory found"
        fi
      shell: bash
    
    # Create artifact archive with error handling
    - name: Create artifact archive
      run: |
        mkdir -p artifacts
        
        if [ -d "out/make" ]; then
          echo "Creating artifact archive from out/make directory"
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a -tzip artifacts/decronymer-${{ matrix.os }}.zip ./out/make/*
          else
            tar -czvf artifacts/decronymer-${{ matrix.os }}.tar.gz -C out/make .
          fi
          echo "Archive created successfully"
        elif [ -d "out" ]; then
          echo "No out/make directory found, using out directory instead"
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a -tzip artifacts/decronymer-${{ matrix.os }}.zip ./out/*
          else
            tar -czvf artifacts/decronymer-${{ matrix.os }}.tar.gz -C out .
          fi
        else
          echo "No artifacts to upload - build likely failed"
          mkdir -p artifacts
          echo "Build failed" > artifacts/build-failed-${{ matrix.os }}.txt
        fi
      shell: bash
      
    # Use v4 for upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: decronymer-${{ matrix.os }}
        path: artifacts/
        if-no-files-found: warn
    
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: decronymer-windows-latest
        path: release-artifacts/windows
    
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: decronymer-macos-latest
        path: release-artifacts/macos
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: decronymer-ubuntu-latest
        path: release-artifacts/linux
    
    - name: Extract artifacts
      run: |
        mkdir -p extracted
        
        # List all downloaded artifacts
        echo "Downloaded artifacts:"
        find release-artifacts -type f | sort
        
        # Extract Windows artifacts
        if [ -f "release-artifacts/windows/decronymer-windows-latest.zip" ]; then
          unzip -o release-artifacts/windows/decronymer-windows-latest.zip -d extracted/windows
        fi
        
        # Extract macOS artifacts
        if [ -f "release-artifacts/macos/decronymer-macos-latest.tar.gz" ]; then
          mkdir -p extracted/macos
          tar -xzvf release-artifacts/macos/decronymer-macos-latest.tar.gz -C extracted/macos
        fi
        
        # Extract Linux artifacts
        if [ -f "release-artifacts/linux/decronymer-ubuntu-latest.tar.gz" ]; then
          mkdir -p extracted/linux
          tar -xzvf release-artifacts/linux/decronymer-ubuntu-latest.tar.gz -C extracted/linux
        fi
        
        # List all extracted files
        echo "Extracted files:"
        find extracted -type f | sort
      shell: bash
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          extracted/**/*.exe
          extracted/**/*.dmg
          extracted/**/*.deb
          extracted/**/*.rpm
          extracted/**/*.zip
          extracted/**/*.nupkg
          extracted/**/*.msi
        draft: false
        prerelease: false
        generate_release_notes: true