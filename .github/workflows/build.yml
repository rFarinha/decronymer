name: Build and Release Decronymer

on:
  push:
    branches: [ main, master ]
    tags:
      - 'RELEASE/v*'
  pull_request:
    branches: [ main, master ]

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate SemVer compatibility
      run: |
        # Extract version from package.json
        VERSION=$(node -p "require('./package.json').version")
        echo "Package version: $VERSION"
        
        # Check if version follows SemVer (MAJOR.MINOR.PATCH)
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Version '$VERSION' is not SemVer-compatible. It should follow the format MAJOR.MINOR.PATCH (e.g. 0.2.0)"
          exit 1
        fi
        
        # Also check setup-script.iss if it exists
        if [ -f "setup-script.iss" ]; then
          ISS_VERSION=$(grep 'MyAppVersion' setup-script.iss | head -1 | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          echo "Inno Setup version: $ISS_VERSION"
          
          if [ "$VERSION" != "$ISS_VERSION" ]; then
            echo "::warning::Version mismatch between package.json ($VERSION) and setup-script.iss ($ISS_VERSION)"
          fi
        fi
  
  build:
    needs: validate-version
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node-version: [18.x]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    # Install dependencies with platform-specific settings
    - name: Install dependencies
      run: npm install
      
    # Add specific dependencies for Linux builds
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev libnss3 libgtk-3-dev libasound2-dev
    
    # Build application with separate architecture handling for macOS
    - name: Build application (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Build for x64
        npm run make -- --arch=x64
        mv out out-x64
        
        # Build for arm64  
        npm run make -- --arch=arm64
        mv out out-arm64
        
        # Create a combined out directory
        mkdir -p out/make
        cp -R out-x64/make/* out/make/ 2>/dev/null || true
        cp -R out-arm64/make/* out/make/ 2>/dev/null || true
        
        # List the output files for debugging
        echo "Files in out/make:"
        ls -la out/make/
      shell: bash
    
    # Build application (Windows and Linux)
    - name: Build application (Windows/Linux)
      if: matrix.os != 'macos-latest'
      run: npm run make
    
    # Create artifact archive
    - name: Create artifact archive
      run: |
        mkdir -p artifacts
        
        if [ -d "out/make" ]; then
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a -tzip artifacts/decronymer-${{ matrix.os }}.zip ./out/make/*
          else
            tar -czvf artifacts/decronymer-${{ matrix.os }}.tar.gz -C out/make .
          fi
        elif [ -d "out" ]; then
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a -tzip artifacts/decronymer-${{ matrix.os }}.zip ./out/*
          else
            tar -czvf artifacts/decronymer-${{ matrix.os }}.tar.gz -C out .
          fi
        else
          echo "No artifacts to upload - build likely failed"
          mkdir -p artifacts
          echo "Build failed" > artifacts/build-failed-${{ matrix.os }}.txt
        fi
      shell: bash
      
    # Upload artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: decronymer-${{ matrix.os }}
        path: artifacts/
        if-no-files-found: warn
    
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/RELEASE/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: decronymer-windows-latest
        path: release-artifacts/windows
    
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: decronymer-macos-latest
        path: release-artifacts/macos
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: decronymer-ubuntu-latest
        path: release-artifacts/linux
    
    - name: Extract artifacts
      run: |
        mkdir -p extracted
        
        # Extract Windows artifacts
        if [ -f "release-artifacts/windows/decronymer-windows-latest.zip" ]; then
          unzip -o release-artifacts/windows/decronymer-windows-latest.zip -d extracted/windows
        fi
        
        # Extract macOS artifacts
        if [ -f "release-artifacts/macos/decronymer-macos-latest.tar.gz" ]; then
          mkdir -p extracted/macos
          tar -xzvf release-artifacts/macos/decronymer-macos-latest.tar.gz -C extracted/macos
        fi
        
        # Extract Linux artifacts
        if [ -f "release-artifacts/linux/decronymer-ubuntu-latest.tar.gz" ]; then
          mkdir -p extracted/linux
          tar -xzvf release-artifacts/linux/decronymer-ubuntu-latest.tar.gz -C extracted/linux
        fi
      
    # Create GitHub Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          extracted/**/*.exe
          extracted/**/*.dmg
          extracted/**/*.deb
          extracted/**/*.rpm
          extracted/**/*.zip
          extracted/**/*.nupkg
          extracted/**/*.msi
        draft: false
        prerelease: false
        generate_release_notes: true